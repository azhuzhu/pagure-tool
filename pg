#!/usr/bin/python

import click
import json
import requests
import sys
import time
import urllib

BASEURL='https://pagure.io'



@click.group()
def pg():
    # main command
    pass

@pg.command()
@click.argument('prid')
def ppr(prid):
    url = "%s/api/0/koji/pull-request/%s" % (BASEURL, prid)
    r = requests.get(url)
    pr = r.json()
    if 'error_code' in pr:
        print "%(error_code)s: %(error)s" % pr
        sys.exit(1)
    import pprint; pprint.pprint(pr)

    for comment in pr['comments']:
        cts = float(comment['date_created'])
        comment['_username'] = comment['user']['name']
        comment['_tstr'] = time.asctime(time.localtime(float(cts)))
        print "Comment by %(_username)s on %(_tstr)s:" % comment
        print
        print comment['comment']
        print

    print "PR#%(id)i: %(title)s" % pr
    print
    print "Merges #%(id)i" % pr
    print "https://pagure.io/koji/pull-request/%(id)i" % pr
    print
    print "STATUS: %(status)s" % pr
    if pr.get('repo_from'):
        # should we use fullname field?
        # or 
        print "Fork: %s/%s" % (BASEURL, pr['repo_from']['fullname'])
    elif pr.get('remote_git'):
        print "Remote: %(remote_git)s" % pr
    else:
        print "Can't determine repo?"
        sys.exit(1)
    print "%(branch_from)s -> %(branch)s" % pr
    if pr['status'] != 'Open':
        print '...'


@pg.command()
@click.option('-o', '--order', default='updated_on')
def prs(order):
    url = "%s/api/0/koji/pull-requests" % BASEURL
    r = requests.get(url)
    data = r.json()
    if 'error_code' in data:
        print "%(error_code)s: %(error)s" % data
        sys.exit(1)
    count = data['total_requests']
    prs = data['requests']
    if order:
        o_keys = order.split(',')
        def sortkey(pr):
            return [pr[k] for k in o_keys]
        prs.sort(key=sortkey)
    for pr in prs:
        print "PR#%(id)i: %(title)s [%(status)s]" % pr


@pg.command(name='list-projects')
@click.argument('pattern')
@click.option('--fork/--no-fork', default=False)
def list_projects(pattern, **opts):
    if pattern:
        opts['pattern'] = pattern
    args = urllib.urlencode(opts)
    url = "%s/api/0/projects" % BASEURL
    url = "%s?%s" % (url, args)
    print url
    r = requests.get(url)
    data = r.json()
    if 'error_code' in data:
        print "%(error_code)s: %(error)s" % data
        sys.exit(1)
    count = data['total_projects']
    for proj in data['projects']:
        print "%(name)s [%(description)s]" % proj


if __name__ == '__main__':
    pg()
