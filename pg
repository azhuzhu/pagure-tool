#!/usr/bin/python

import click
import dateutil.parser
import os
import pdb
import pprint
import pygit2
import requests
import subprocess
import sys
import time
import traceback
import urllib
import urlparse

BASEURL = 'https://pagure.io'


def pcall(path, query=None, api=0, baseurl=BASEURL):
    url = "%s/api/%s/%s" % (baseurl, api, path)
    if isinstance(query, basestring):
        url = "%s?%s" % (url, query)
    elif query is not None:
        query = urllib.urlencode(query, True)
        url = "%s?%s" % (url, query)
    print "DEBUG: %s" % url
    r = requests.get(url)
    try:
        data = r.json()
    except Exception:
        print "Server returned bad value"
        print r
        raise
    if 'error_code' in data:
        print "%(error_code)s: %(error)s" % data
        sys.exit(1)
    return data


@click.group()
def pg():
    # main command
    pass


@pg.group()
def pr():
    pass


def get_project(cwd=None):
    if cwd is None:
        cwd = os.getcwd()
    try:
        path = pygit2.discover_repository(cwd)
    except KeyError:
        return None
    repo = pygit2.Repository(path)
    remote = pick_pagure_remote(repo)
    if remote is None:
        return None
    try:
        info = parse_pagure_url(remote.url)
    except ValueError:
        return None
    return info.project


def pick_pagure_remote(repo):
    choices = {}
    for remote in repo.remotes:
        url = remote.url
        if 'pagure.io' in url:  # XXX should be smarter
            choices[remote.name] = remote
    if 'origin' in choices:
        return choices['origin']
    elif choices:
        return choices.values()[0]
    else:
        return None


def parse_pagure_url(url):
    """Parse a pagure git url"""
    info = urlparse.urlparse(url)
    parts = info.path.split('/')
    parts = [p for p in parts if p]
    if parts[0] == 'forks':
        info.parent = parts[1]
        parts = parts[2:]
    if len(parts) > 1:
        info.namespace = parts[0]
        parts = parts[1:]
    if len(parts) > 1:
        raise ValueError('Too many url path components: %s' % url)
    project = parts[0]
    if project.endswith('.git'):
        project = project[:-4]
    info.project = project
    return info


@pr.command('info')
@click.argument('prid')
@click.option('-p', '--project')
def prinfo(prid, project):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please specify a project')
    pr = pcall("%s/pull-request/%s" % (project, prid))
    pprint.pprint(pr)

    for comment in pr['comments']:
        cts = float(comment['date_created'])
        comment['_username'] = comment['user']['name']
        comment['_tstr'] = time.asctime(time.localtime(float(cts)))
        print "Comment by %(_username)s on %(_tstr)s:" % comment
        print
        print comment['comment']
        print

    print "PR#%(id)i: %(title)s" % pr
    print
    print "Merges #%(id)i" % pr
    print "https://pagure.io/koji/pull-request/%(id)i" % pr
    print
    print "STATUS: %(status)s" % pr
    if pr.get('repo_from'):
        # should we use fullname field?
        print "Fork: %s/%s" % (BASEURL, pr['repo_from']['fullname'])
    elif pr.get('remote_git'):
        print "Remote: %(remote_git)s" % pr
    else:
        print "Can't determine repo?"
        sys.exit(1)
    print "%(branch_from)s -> %(branch)s" % pr
    if pr['status'] != 'Open':
        print '...'


@pr.command('checkout')
@click.argument('prid')
def pr_checkout(prid, **opts):
    project = get_project()
    if project is None:
        raise Exception('Must be run from pagure checkout')
    pr = pcall("%s/pull-request/%s" % (project, prid))
    url, remote_branch = get_pr_source(pr)

    cwd = os.getcwd()
    path = pygit2.discover_repository(cwd)
    repo = pygit2.Repository(path)

    # current version of pygit2 doesn't seem to be able to fetch from
    # arbitrary urls
    cmd = ['git', 'fetch', url, remote_branch]
    subprocess.check_call(cmd)
    branch = "pagure/pr/%s" % prid
    if branch in repo.listall_branches(pygit2.GIT_BRANCH_LOCAL):
        print "Reusing branch: %s" % branch
        cmd = ['git', 'update-ref',
                '-m', 'updating branch %s' % branch,
                'refs/heads/%s' % branch, 'FETCH_HEAD']
        subprocess.check_call(cmd)
    else:
        cmd = ['git', 'branch', branch, 'FETCH_HEAD']
        subprocess.check_call(cmd)
        print "New branch: %s" % branch

    # not sure I trust pygit2's checkout function
    cmd = ['git', 'checkout', branch]
    subprocess.check_call(cmd)
    # TODO: --follow option ?


@pr.command('merge')
def pr_checkout(**opts):
    project = get_project()
    if project is None:
        raise Exception('Must be run from pagure checkout')

    cwd = os.getcwd()
    path = pygit2.discover_repository(cwd)
    repo = pygit2.Repository(path)

    # determine pr from branch
    if not repo.head.name.startswith('refs/heads/'):
        raise Exception("HEAD is not a branch")
    branch = repo.head.name[11:]
    if not branch.startswith('pagure/pr/'):
        raise Exception("Not a pr branch: %s" % branch)
    prid = branch[10:]
    print "PR branch for %s" % prid

    pr = pcall("%s/pull-request/%s" % (project, prid))
    url, remote_branch = get_pr_source(pr)

    # fetch for comparison
    cmd = ['git', 'fetch', url, remote_branch]
    subprocess.check_call(cmd)

    # pygit2 can't give me FETCH_HEAD
    cmd = ['git', 'rev-parse', 'FETCH_HEAD']
    remote_ref = subprocess.check_output(cmd).strip()
    remote_obj = repo.get(remote_ref)

    if remote_obj.oid != repo.head.target:
        print("Warning: current branch does match remote")
        # TODO: show differences
        # TODO: proceed if --force is given
        raise Exception

    # merge into master
    cmd = ['git', 'checkout', 'master']  # TODO: allow merge to other branches
    subprocess.check_call(cmd)

    # TODO: this should probably be an option
    cmd = ['git', 'pull', '--ff-only']
    subprocess.check_call(cmd)

    # TODO - generate better merge message
    msg = "Merge PR#%s" % prid

    cmd = ['git', 'merge', '--edit', '-m', msg, '--no-ff', branch]
    print cmd


def get_pr_source(prinfo):
    """Returns a pair [url, branch]"""
    branch = prinfo['branch_from']
    if prinfo.get('repo_from'):
        # apparently, for this we can use the fullname
        url = "https://pagure.io/%(fullname)s.git" % prinfo['repo_from']
    elif prinfo.get('remote_git'):
        url = prinfo['remote_git']
    else:
        raise RuntimeError("Can't determine pr source")
    return url, branch


@pr.command('list')
@click.option('-p', '--project')
@click.option('-o', '--order', default='updated_on')
def pr_list(project, order):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    data = pcall('%s/pull-requests' % project)
    # count = data['total_requests']
    prs = data['requests']
    if order:
        o_keys = order.split(',')
        def sortkey(pr):
            return [pr.get(k) for k in o_keys]
        prs.sort(key=sortkey)
    for pr in prs:
        print "PR#%(id)i: %(title)s [%(status)s]" % pr


def project_path(project):
    parts = []
    if project.get('parent'):
        parts.append('fork')
        parts.append(project['user']['name'])
    if project.get('namespace'):
        parts.append(project.get('namespace'))
    parts.append(project['name'])
    return '/'.join(parts)


@pg.command(name='list-projects')
@click.argument('pattern')
@click.option('--fork/--no-fork', default=False)
def list_projects(pattern, **opts):
    if pattern:
        opts['pattern'] = pattern
    data = pcall('projects', opts)
    # count = data['total_projects']
    for proj in data['projects']:
        proj['_path'] = project_path(proj)
        print "%(_path)s: %(description)s" % proj


@pg.group()
def project():
    pass


@project.command('git-urls')
@click.option('-p', '--project')
def git_urls(project):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    data = pcall("%s/git/urls" % project)
    for url in data['urls']:  # not a list for some reason
        print "%s: %s" % (url, data['urls'][url])


@project.command('git-tags')
@click.option('-p', '--project')
def git_tags(project):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    data = pcall("%s/git/tags" % project)
    for tag in data['tags']:
        print tag


@project.command('git-branches')
@click.option('-p', '--project')
def git_branches(project):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    data = pcall("%s/git/branches" % project)
    for br in data['branches']:
        print br


@project.command()
@click.option('-p', '--project')
def watchers(project):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    data = pcall("%s/watchers" % project)
    for row in data['watchers']:  # dict, not list
        wtype = data['watchers'][row]
        print "%s: %s" % (row, wtype)


@project.command("info")
@click.option('-p', '--project')
def projectinfo(project):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    data = pcall(project)
    pprint.pprint(data)


@pg.group()
def issue():
    pass


def invert_opt(val):
    if val is None:
        return None
    return not val


@issue.command(name='list')
@click.option('-p', '--project')
@click.option('-o', '--order', default='updated_on')
@click.option('--status', help="filter by status")
@click.option('--tags', help="filter by tags")
@click.option('--author', help="filter by author")
@click.option('--assignee', help="filter by assignee")
@click.option('--priority', help="filter by priority")
@click.option('--since', help="filter by date")
@click.option('-m', '--milestones', help="filter by milestone", multiple=True)
@click.option('--stones/--no-stones', help="issues with no milestone")
def issuelist(project, order, **opts):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    opts['no_stones'] = invert_opt(opts['stones'])
    del opts['stones']
    for k in list(opts):
        if opts[k] is None:
            del opts[k]
    if 'since' in opts:
        val = opts['since']
        dt = dateutil.parser.parse(val)
        opts['since'] = int(time.mktime(dt.timetuple()))
    data = pcall("%s/issues" % project, opts)
    issues = data['issues']
    if order:
        o_keys = order.split(',')
        def sortkey(row):
            return [row.get(k) for k in o_keys]
        issues.sort(key=sortkey)
    for row in data['issues']:
        print "%(id)s: %(title)s" % row


@issue.command("info")
@click.argument('issueid')
@click.option('-p', '--project')
def issueinfo(issueid, project):
    if project is None:
        project = get_project()
        if project is None:
            raise Exception('Please project a project')
    data = pcall("%s/issue/%s" % (project, issueid))
    pprint.pprint(data)


if __name__ == '__main__':
    try:
        pg()
    except Exception:
        etype, e, tb = sys.exc_info()
        traceback.print_exc()
        pdb.post_mortem(tb)
